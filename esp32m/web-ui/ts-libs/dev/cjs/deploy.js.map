{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../src/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["import Sftp from 'ssh2-sftp-client';\r\nimport Ssh2 from 'ssh2-promise';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport rl from 'readline';\r\nimport { exec } from 'child_process';\r\n\r\ntype TDeployConfig = {\r\n  projdir: string;\r\n  uidir?: string;\r\n  host: string;\r\n  port?: number;\r\n  username: string;\r\n  privateKey?: string | Buffer;\r\n  passphrase?: string;\r\n};\r\n\r\nclass Project {\r\n  readonly packageJson: any;\r\n  readonly safeName: string;\r\n  constructor(readonly dir: string) {\r\n    this.packageJson = JSON.parse(\r\n      fs.readFileSync(path.join(dir, 'package.json')).toString()\r\n    );\r\n    this.safeName = this.packageJson.name.replace('@', '').replace('/', '-');\r\n  }\r\n  yarn(script: string) {\r\n    return new Promise((resolve, reject) => {\r\n      console.log(`running yarn ${script} in ${this.dir}`);\r\n      exec('yarn ' + script, { cwd: this.dir }, (error, stdout, stderr) => {\r\n        if (error) reject(error);\r\n        else {\r\n          if (stdout) console.log(stdout);\r\n          if (stderr) console.warn(stderr);\r\n          resolve(stdout);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport class Deploy {\r\n  readonly project: Project;\r\n  readonly ui?: Project;\r\n  constructor(readonly config: TDeployConfig) {\r\n    const { projdir, uidir } = config;\r\n    this.project = new Project(projdir);\r\n    if (uidir) this.ui = new Project(uidir);\r\n  }\r\n  async deploy() {\r\n    try {\r\n      await this.project.yarn('build');\r\n      await this.copyFiles(this.project);\r\n      if (this.ui) {\r\n        await this.ui.yarn('build');\r\n        await this.copyFiles(this.ui, 'ui');\r\n      }\r\n    } finally {\r\n      await this.cleanup();\r\n    }\r\n  }\r\n  async copyFiles(project: Project, subdir?: string) {\r\n    const sftp = await this.getSftp();\r\n    let remotedir = path.posix.join(\r\n      '/home',\r\n      this.config.username,\r\n      this.project.safeName\r\n    );\r\n    if (subdir) remotedir = path.posix.join(remotedir, subdir);\r\n    await sftp.mkdir(remotedir, true);\r\n    for (const filename of ['main.js', 'main.js.map', 'index.html']) {\r\n      const filepath = path.join(project.dir, 'dist', filename);\r\n      if (fs.existsSync(filepath)) {\r\n        const dest = path.posix.join(remotedir, filename);\r\n        console.log(`copying ${filepath} -> ${dest}`);\r\n        await sftp.put(filepath, dest);\r\n      }\r\n    }\r\n  }\r\n  async getSshConfig() {\r\n    if (!this._sshConfig) {\r\n      const {\r\n        projdir: _,\r\n        uidir: __,\r\n        host,\r\n        port = 22,\r\n        username,\r\n        ...rest\r\n      } = this.config;\r\n      let { privateKey, passphrase } = this.config;\r\n      if (privateKey && fs.existsSync(privateKey))\r\n        privateKey = fs.readFileSync(privateKey);\r\n      if (passphrase === 'ask')\r\n        passphrase = await new Promise((resolve) =>\r\n          this.getReadline().question('Enter passphrase: ', resolve)\r\n        );\r\n      this._sshConfig = {\r\n        ...rest,\r\n        host,\r\n        port,\r\n        username,\r\n        privateKey,\r\n        passphrase,\r\n      };\r\n    }\r\n    return this._sshConfig;\r\n  }\r\n  async getSftp() {\r\n    if (!this._sftp) {\r\n      const config = await this.getSshConfig();\r\n      this._sftp = new Sftp();\r\n      await this._sftp.connect(config);\r\n      console.log(`connected to ${config.host}:${config.port} via SFTP`);\r\n      this._sftp.on('upload', (info) => {\r\n        console.log(`uploaded ${info.source}`);\r\n      });\r\n    }\r\n    return this._sftp;\r\n  }\r\n  async getSsh() {\r\n    if (!this._ssh) {\r\n      const config = await this.getSshConfig();\r\n      this._ssh = new Ssh2(config);\r\n      await this._ssh.connect();\r\n      console.log(`connected to ${config.host}:${config.port} via SSH`);\r\n    }\r\n    return this._sftp;\r\n  }\r\n  getReadline() {\r\n    if (!this._readline)\r\n      this._readline = rl.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout,\r\n      });\r\n    return this._readline;\r\n  }\r\n  async cleanup() {\r\n    const sftp = this._sftp;\r\n    if (sftp) {\r\n      delete this._sftp;\r\n      await sftp.end();\r\n      console.log('SFTP connection closed');\r\n    }\r\n    const ssh = this._ssh;\r\n    if (ssh) {\r\n      delete this._ssh;\r\n      await ssh.close();\r\n      console.log('SSH connection closed');\r\n    }\r\n    const readline = this._readline;\r\n    if (readline) {\r\n      delete this._readline;\r\n      readline.close();\r\n    }\r\n  }\r\n  private _sftp?: Sftp;\r\n  private _ssh?: Ssh2;\r\n  private _sshConfig?: Sftp.ConnectOptions;\r\n  private _readline?: rl.Interface;\r\n}\r\n"]}